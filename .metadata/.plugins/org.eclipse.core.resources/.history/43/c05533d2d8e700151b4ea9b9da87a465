package br.edu.ifpi.ads;

public class ALU {

	private boolean[] operand1;
	private boolean[] operand2;

	private boolean branchTaken;
	
	public short convertBitsToShort(boolean[] bits){
		int result = 0;
		int count = bits.length-1;
		for (boolean bit : bits) {
			if(bit == true){
				result += Math.pow(2, count);
				count--;
			}else{
				result += 0;
				count--;
			}
		}
		return (short) result;
	}
	
	public boolean[] convertShortToBits(short n){
		boolean[] result = new boolean[16];
		for (int i = 15; i > -1; i--) {
			short q = (short) (n/2);
			if(n%2 == 0){
				result[i] = false;
			}else{
				result[i] = true;
			}
			n = q;
		}
		return result;
	}

	public boolean[] execute(OperationCode opCode) {
		boolean[] result = new boolean[16];
		switch(opCode){
			case ADD:
				short op1 = convertBitsToShort(operand1);
				short op2 = convertBitsToShort(operand2);
				result = convertShortToBits((short) (op1 + op2));
				return result;
			case NAND:
				boolean[] add = execute(OperationCode.ADD);
				for (boolean bit : add) {
					if(bit == true){
						add
					}
				}
				break;
			case BEQ:
				break;
			case PASS1:
				break;
			default:
				System.out.println("Invalid opCode");
				break;
		}
		
		return null;
	}

	public boolean[] getOperand1() {
		return operand1;
	}

	public void setOperand1(boolean[] operand1) {
		this.operand1 = operand1;
	}

	public boolean[] getOperand2() {
		return operand2;
	}

	public void setOperand2(boolean[] operand2) {
		this.operand2 = operand2;
	}

	public boolean isBranchTaken() {
		return branchTaken;
	}

}
