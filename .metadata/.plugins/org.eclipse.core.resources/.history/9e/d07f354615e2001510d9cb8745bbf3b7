package grupoD.associapp.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import grupoD.associapp.interfaces.ComunidadeDAO;
import grupoD.associapp.modelo.Comunidade;
import grupoD.associapp.modelo.Data;
import grupoD.associapp.modelo.Pessoa;

public class ComunidadeJDBC_DAO implements ComunidadeDAO {
	
	private Connection conn;

	@Override
	public List<Comunidade> lista() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Comunidade inserir(Comunidade c) {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "INSERT INTO comunidades(nome, idadeMinimaLider, tipo) VALUES('"+c.getNome()+"',"
		+c.getIdadeMinimaLider() + ",'" + c.getZona().getId() + "');";
		
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			sql = "SELECT id FROM comunidades ORDER BY id DESC limit 1";
			ResultSet rs = stmt.executeQuery(sql);
			int id = rs.getInt("id");
			c.setId(id);
		}catch (SQLException e){
			e.printStackTrace();
			System.out.println("Erro ao inserir Comunidade");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
		
		return c;
	}

	@Override
	public void remover(Comunidade c) {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "DELETE FROM comunidades where comunidades.id = " + c.getCodigo();
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
		}catch (Exception e){
			e.printStackTrace();
			System.out.println("Erro ao inserir Comunidade");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
	}

	@Override
	public Comunidade obter(int id) {
		conn = ConnectionFactory.getConnection();
		String sql = "SELECT * FROM pessoas WHERE id = " + id;
		Pessoa p = null;
		try {
			Statement stmt = conn.createStatement();
			ResultSet resultado = stmt.executeQuery(sql);
			FamiliaJDBC_DAO daoF = new FamiliaJDBC_DAO();
			while (resultado.next()) {
				p = new Pessoa();
				p.setId(resultado.getInt("id"));
				p.setNome(resultado.getString("nome"));
				p.setCpf(resultado.getString("cpf"));
				p.setDataNascimento(Data.parseInt(resultado.getString("data_nascimento")));
				p.setGrauEscolaridade(resultado.getString("grau_escolaridade"));
				p.setSexo(resultado.getString("sexo"));
				p.setProfissao(resultado.getString("profissao"));
				p.setReligiao(resultado.getString("religiao"));
				p.setTimeDeFutebol(resultado.getString("time"));
				p.setRenda(resultado.getDouble("renda"));
				p.setContatos(daoC.obter(id));
				p.setParentescos(daoP.obterParentescos(id));
			}
			
			return c;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}

	@Override
	public void createTable() {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "CREATE TABLE comunidades(id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT, cidade TEXT, zona INT, regiao TEXT, tipoComercio TEXT, historico TEXT, grauSeguranca INT, localizacao TEXT, aptidoes TEXT, idadeMinimaLider INT, codigo TEXT, id_recursos INT, id_gestao INT);";
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			conn.close();
		}catch (SQLException e){
			e.printStackTrace();
			System.out.println("Erro ao criar tabela");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
	}

}
