import java.util.ArrayList;
import java.util.List;

public class RunSystem {

	public static short PC = 0;
	public static ExecuteUnit ALU;
	public static List<Instruction> instructions = new ArrayList<>();
	public static List<RegisterFile> RF = new ArrayList<>();
	
	
	public static void sendInstruction(Instruction inst){
		int i = 0;
		while(RegUpdateUnit.Queue.get(i).neededId == 0){
			if(RegUpdateUnit.Queue.get(i).neededId > 0)
				break;
			i++;
		}
		//Apenas enviando ADD por enquanto
		RegUpdateUnit.Queue.get(i).targetIndex = inst.tgt.index;
		RegUpdateUnit.Queue.get(i).data1 = inst.src1.value;
		RegUpdateUnit.Queue.get(i).data2 = inst.src2.value;
		RegUpdateUnit.Queue.get(i).receivedFromRF = true;
		inst.id = PC;
		if(instructions.get(PC-1) != null){
			if(instructions.get(PC-1).src1 == inst.src1 || instructions.get(PC-1).src2 == inst.src2){
				RegUpdateUnit.Queue.get(i).neededId = instructions.get(PC-1).id;
			}else{
				RegUpdateUnit.Queue.get(i).neededId = PC;
			}
		}
		instructions.add(inst);
		ALU.Update(inst);
		PC++;
	}
	
	public static void main(String[] args) {
		
		RF.add(new RegisterFile());
		for (int i = 0; i < RF.size(); i++) {
			RF.add(new RegisterFile());
		}
		
		//ADDI 1,0,1
		Instruction addi = new Instruction((short) 0, RF.get(0), RF.get(0), (short) 1);
		sendInstruction(addi);
		Instruction add = new Instruction((short) 0, RF.get(0), RF.get(0), RF.get(0)); //ADD 1,1,1
		sendInstruction(add);
		
		
	}

}
