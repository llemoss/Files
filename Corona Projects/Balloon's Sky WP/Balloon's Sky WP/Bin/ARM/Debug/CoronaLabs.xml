<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>CoronaLabs</name>
  </assembly>
  <members>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean">
      <summary>
        <para>Stores a boolean value that can be transferred to/from Lua.</para>
        <para>Instances of this class are immutable.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.CompareTo(System.Boolean)">
      <summary>Determines if this object is less than, greater than, or equal to the given boolean value.</summary>
      <param name="value">The boolean value to be compared with.</param>
      <returns>
        <para>Returns a positive value if this object is greater than the given object. (True is greater than false.)</para>
        <para>Returns a negative value if this object is less than the given object. (False is less than true.)</para>
        <para>Returns zero if the both objects are equal.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.CompareTo(System.Object)">
      <summary>Determines if this object is less than, greater than, or equal to the given object.</summary>
      <param name="value">The object to be compared with.</param>
      <returns>
        <para>Returns a positive value if this object is greater than the given object.</para>
        <para>Returns a negative value if this object is less than the given object.</para>
        <para>Returns zero if the both objects are equal.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.Equals(System.Boolean)">
      <summary>Determines if the given value matches this boxed object's stored value.</summary>
      <param name="value">The value to compare with.</param>
      <returns>Returns true if the given value matches this boxed object's value. Returns false if not.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.Equals(System.Object)">
      <summary>Determines if this object matches the given object.</summary>
      <param name="value">The object to compare with.</param>
      <returns>
        <para>Returns true if the given object's value matches this object's value.</para>
        <para>Returns false if they do not equal, if given null, or if the given object is of a different type.</para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.False">
      <summary>Pre-allocated instance of this class set to "false".</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.From(System.Boolean)">
      <summary>Fetches a pre-allocated instance of this class based on the given value.</summary>
      <param name="value">The boolean value to be boxed.</param>
      <returns>Returns a True or False instance of this class.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.GetHashCode">
      <summary>Gets an integer hash code for this object.</summary>
      <returns>Returns this object's hash code.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.PushToLua(System.Int64)">
      <summary>Pushes this object's data to the top of the Lua stack.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <returns>
        <para>Returns true if the push was successful.</para>
        <para>Returns false if it failed or if given a memory address of zero (aka: null pointer).</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.ToString">
      <summary>Gets the boxed boolean value in string form.</summary>
      <returns>Returns "true" or "false".</returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.True">
      <summary>Pre-allocated instance of this class set to "true".</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean.Value">
      <summary>Gets the boxed boolean value.</summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaBoxedData">
      <summary>
        <para>Provides an easy means of converting Lua data to a Corona boxed data object.</para>
        <para>You cannot create instances of this class. You can only use this class' static methods.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedData.FromLua(System.Int64,System.Int32)">
      <summary>Creates a boxed data object containing a copy of the value(s) indexed in Lua.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <param name="luaStackIndex">Index to a Lua object in the Lua stack such as a boolean, number, string, or table.</param>
      <returns>
        <para>Returns a boxed data object containing a copy of the indexed Lua object's data.</para>
        <para>Returns null if unable to copy the indexed data in Lua or if given invalid arguments.</para>
      </returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaBoxedList">
      <summary>Stores a collection of boxed data that can be transferred to/from Lua as an array.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedList.#ctor">
      <summary>Creates an empty list.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedList.Add(CoronaLabs.Corona.WinRT.ICoronaBoxedData)">
      <summary>Adds the given item to the end of the collection.</summary>
      <param name="item">
        <para>The item to be added to the collection.</para>
        <para>Cannot be null because Lua arrays cannot contain nil elements.</para>
      </param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedList.Clear">
      <summary>Removes all items in the collection.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedList.Count">
      <summary>Gets the number of items in the collection.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedList.First">
      <summary>Gets an iterator used to iterate through all of the elements in the collection in a foreach loop.</summary>
      <returns>Returns an iterator to be used by a foreach loop.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedList.PushToLua(System.Int64)">
      <summary>Pushes this object's data to the top of the Lua stack.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <returns>
        <para>Returns true if the push was successful.</para>
        <para>Returns false if it failed or if given a memory address of zero (aka: null pointer).</para>
      </returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaBoxedNumber">
      <summary>
        <para>Stores a floating point value that can be transferred to/from Lua.</para>
        <para>Instances of this class are immutable.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.#ctor(System.Double)">
      <summary>Creates an object which boxes the given floating point value.</summary>
      <param name="value">The value to be boxed.</param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.CompareTo(System.Double)">
      <summary>Determines if this object is less than, greater than, or equal to the given value.</summary>
      <param name="value">The value to be compared with.</param>
      <returns>
        <para>Returns a positive value if this object is greater than the given object.</para>
        <para>Returns a negative value if this object is less than the given object.</para>
        <para>Returns zero if the both objects are equal.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.CompareTo(System.Object)">
      <summary>Determines if this object is less than, greater than, or equal to the given object.</summary>
      <param name="value">The object to be compared with.</param>
      <returns>
        <para>Returns a positive value if this object is greater than the given object.</para>
        <para>Returns a negative value if this object is less than the given object.</para>
        <para>Returns zero if the both objects are equal.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.Equals(System.Double)">
      <summary>Determines if the given value matches this boxed object's stored value.</summary>
      <param name="value">The value to compare with.</param>
      <returns>Returns true if the given value matches this boxed object's value. Returns false if not.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.Equals(System.Object)">
      <summary>Determines if this object matches the given object.</summary>
      <param name="value">The object to compare with.</param>
      <returns>
        <para>Returns true if the given object's value matches this object's value.</para>
        <para>Returns false if they do not equal, if given null, or if the given object is of a different type.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.GetHashCode">
      <summary>Gets an integer hash code for this object.</summary>
      <returns>Returns this object's hash code.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.PushToLua(System.Int64)">
      <summary>Pushes this object's data to the top of the Lua stack.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <returns>
        <para>Returns true if the push was successful.</para>
        <para>Returns false if it failed or if given a memory address of zero (aka: null pointer).</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.ToString">
      <summary>Gets the boxed floating point value as a localized string.</summary>
      <returns>Returns the boxed floating point value as a localized string.</returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedNumber.Value">
      <summary>Gets the boxed floating point value.</summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaBoxedString">
      <summary>
        <para>Stores a string that can be transferred to/from Lua.</para>
        <para>Instances of this class are immutable.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.CompareTo(System.Object)">
      <summary>Determines if this object is less than, greater than, or equal to the given object.</summary>
      <param name="value">The object to be compared with.</param>
      <returns>
        <para>Returns a positive value if this object is greater than the given object.</para>
        <para>Returns a negative value if this object is less than the given object.</para>
        <para>Returns zero if the both objects are equal.</para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedString.Empty">
      <summary>Gets a re-usable empty string object.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.Equals(CoronaLabs.WinRT.Utf8String)">
      <summary>Determines if this string matches the given UTF-8 string.</summary>
      <param name="value">The UTF-8 string to compare with.</param>
      <returns>
        <para>Returns true if the given strings exactly match.</para>
        <para>Returns false if not or if given null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.Equals(System.Object)">
      <summary>Determines if this object matches the given object.</summary>
      <param name="value">The object to compare with.</param>
      <returns>
        <para>Returns true if the given object's value matches this object's value.</para>
        <para>Returns false if they do not equal, if given null, or if the given object is of a different type.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.Equals(System.String)">
      <summary>Determines if this string matches the given UTF-16 string.</summary>
      <param name="value">The UTF-16 string to compare with.</param>
      <returns>
        <para>Returns true if the given strings exactly match.</para>
        <para>Returns false if not or if given null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.From(CoronaLabs.WinRT.Utf8String)">
      <summary>Creates an object which boxes the given UTF-8 string.</summary>
      <param name="value">The UTF-8 string to be boxed.</param>
      <returns>
        <para>Returns an object which boxes the given string.</para>
        <para>Returns a <see cref="P:CoronaLabs.Corona.WinRT.CoronaBoxedString.Empty" /> object if the given string is empty or null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.From(System.String)">
      <summary>Creates an object which boxes the given string.</summary>
      <param name="value">The string to be boxed.</param>
      <returns>
        <para>Returns an object which boxes the given string.</para>
        <para>Returns a <see cref="P:CoronaLabs.Corona.WinRT.CoronaBoxedString.Empty" /> object if the given string is empty or null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.GetHashCode">
      <summary>Gets an integer hash code for this object.</summary>
      <returns>Returns this object's hash code.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.PushToLua(System.Int64)">
      <summary>Pushes this object's data to the top of the Lua stack.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <returns>
        <para>Returns true if the push was successful.</para>
        <para>Returns false if it failed or if given a memory address of zero (aka: null pointer).</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.ToString">
      <summary>Gets the boxed string in UTF-16 form.</summary>
      <returns>Returns the boxed string in UTF-16 form.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.ToUtf16String">
      <summary>Gets the boxed string in UTF-16 form.</summary>
      <returns>Returns the boxed string in UTF-16 form.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedString.ToUtf8String">
      <summary>Gets the boxed string in UTF-8 form.</summary>
      <returns>Returns the boxed string in UTF-8 form.</returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaBoxedTable">
      <summary>Stores a dictionary of key/value pairs that can be transferred to/from Lua as a table.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.#ctor">
      <summary>Creates an empty table.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.Clear">
      <summary>Removes all entries from the table. This makes the table count zero.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.ContainsKey(CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData)">
      <summary>Determines if the given key exists in the table.</summary>
      <param name="key">Unique key to search for in the table.</param>
      <returns>
        <para>Returns true if the given key was found in the table.</para>
        <para>Returns false if the key was not found or if the given key was null.</para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaBoxedTable.Count">
      <summary>Gets the number of items in the collection.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.First">
      <summary>Gets an iterator used to iterate through all of the key/value pairs in the table in a foreach loop.</summary>
      <returns>Returns an iterator to be used by a foreach loop.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.GetValueByKey(CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData)">
      <summary>Fetches a value from the table by its unique key.</summary>
      <param name="key">Unique key to search for.</param>
      <returns>
        <para>Returns the value belonging to the given key.</para>
        <para>Returns null if the key was not found in the table or the given key was null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.PushToLua(System.Int64)">
      <summary>Pushes this object's data to the top of the Lua stack.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <returns>
        <para>Returns true if the push was successful.</para>
        <para>Returns false if it failed or if given a memory address of zero (aka: null pointer).</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.RemoveByKey(CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData)">
      <summary>Removes an entry from the table by its unique key.</summary>
      <param name="key">Unique key to search for in the table.</param>
      <returns>
        <para>Returns true if the key's entry was successfully removed from the table.</para>
        <para>Returns false if the key was not found in the table or if the given key was null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaBoxedTable.Set(CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData,CoronaLabs.Corona.WinRT.ICoronaBoxedData)">
      <summary>
        <para>Adds the given key/value pair to the table.</para>
        <para>If the given key already exists in the table, then its value will be replaced.</para>
      </summary>
      <param name="key">
        <para>Unique key to store the value under in the table.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
      <param name="value">
        <para>The value to store in the table. to the property in the collection.</para>
        <para>
  Setting this to null will remove its entry from the table.
  This matches Lua's behavior where Lua tables do not support nil values.
 </para>
      </param>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaLuaEventArgs">
      <summary>Provides a generic collection of all property values belonging to a Corona event dispatched to/from Lua.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventArgs.#ctor(CoronaLabs.Corona.WinRT.CoronaLuaEventProperties)">
      <summary>Creates a new object providing a Corona event's properties to be dispatched to/from Lua.</summary>
      <param name="properties">
        <para>Collection of name/value property pairs that make up the Corona event table in Lua.</para>
        <para>
  This collection must contain a "name" property having a unique Corona event name or
  else an InvalidArgumentException will be thrown.
 </para>
        <para>The given argument cannot be null or else a NullReferenceException will be thrown.</para>
      </param>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaLuaEventArgs.EventName">
      <summary>
        <para>
  Gets the event's unique name from its properties collection such as "system", "timer", "enterFrame", etc.
 </para>
        <para>In Lua, this is the name provided via the "event.name" field in the Lua listener function.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaLuaEventArgs.Properties">
      <summary>Gets a read-only collection of name/value property pairs making up the Corona event.</summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaLuaEventHandler">
      <summary>
        <para>Delegate to be invoked by the Corona runtime when an event has been dispatched from Lua.</para>
        <para>
  An instance of this handler is expected to be given to the CoronaRuntimeEnvironment::AddEventListener() method
  in order to subscribe to a particular Corona event.
 </para>
      </summary>
      <param name="sender">Reference to the Corona runtime that raised/dispatched the event.</param>
      <param name="e">Provides the Corona event's properties.</param>
      <returns>
        <para>Returns a value back to Lua, if applicable to the event.</para>
        <para>
  Can return a <see cref="T:CoronaLabs.Corona.WinRT.CoronaBoxedBoolean" />, <see cref="T:CoronaLabs.Corona.WinRT.CoronaBoxedNumber" />, <see cref="T:CoronaLabs.Corona.WinRT.CoronaBoxedString" />,
  <see cref="T:CoronaLabs.Corona.WinRT.CoronaBoxedList" />, or <see cref="T:CoronaLabs.Corona.WinRT.CoronaBoxedTable" />.
 </para>
        <para>Returning null will return nil in Lua.</para>
      </returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties">
      <summary>
 Stores a collection of name/value property pairs for one Corona event that is intended to be dispatched to/from Lua.
</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Clear">
      <summary>Removes all properties from the collection, making the collection empty.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Contains(System.String)">
      <summary>Determines if the given property name exists in the collection.</summary>
      <param name="name">The unique name of the property to search for.</param>
      <returns>
        <para>Returns true if the given property name exists in the collection.</para>
        <para>Returns false if not or if given a null/emptry string.</para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Count">
      <summary>Fetches the number of properties stored in the collection.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.CreateWithName(System.String)">
      <summary>Creates a new Corona event properties table using the given event name.</summary>
      <param name="eventName">
        <para>The Corona event "name" to be added to the event properties table.</para>
        <para>
  Expected to be one of the Corona event names defined here:
  <a href="http://docs.coronalabs.com/api/event/index.html">http://docs.coronalabs.com/api/event/index.html</a></para>
        <para>
  Alternatively, you can use your own custom event name that you can use to communicate between
  native code and Lua, such as how it works with Corona plugins.
 </para>
        <para>This name is required. You cannot dispatch an event to Corona without a name.</para>
        <para>Cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <returns>Returns a new properties collection assigned the given event name.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.First">
      <summary>Gets an iterator that can be used to traverse all properties in the collection via a foreach loop.</summary>
      <returns>Returns an iterator that can be used to traverse all properties in the collection.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Get(System.String)">
      <summary>Fetches a property value from the collection by its property name.</summary>
      <param name="name">The unique name of the property to fetch from.</param>
      <returns>
        <para>Returns the value of the specified property as a boxed object.</para>
        <para>Returns null if the property name was not found.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Remove(System.String)">
      <summary>Removes a property from the collection by its unique name.</summary>
      <param name="name">The unique name of the property to remove from the collection.</param>
      <returns>
        <para>Returns true if the specified property was removed from the collection.</para>
        <para>Returns false if the given property name was not found or if given a null/empty string.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Set(System.String,CoronaLabs.Corona.WinRT.ICoronaBoxedData)">
      <summary>
        <para>Adds the given property name/value pair to the collection.</para>
        <para>If the given property name already exists in the collection, then its value will be replaced.</para>
      </summary>
      <param name="name">
        <para>Unique name of the property to add or update.</para>
        <para>Cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="value">
        <para>The value to be assigned to the property in the collection.</para>
        <para>
  Setting this to null will remove the property from the collection.
  This is because Lua tables do not support nil values.
 </para>
      </param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Set(System.String,System.Boolean)">
      <summary>
        <para>Adds the given property name/value pair to the collection.</para>
        <para>If the given property name already exists in the collection, then its value will be replaced.</para>
      </summary>
      <param name="name">
        <para>Unique name of the property to add or update.</para>
        <para>Cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="value">The value to be assigned to the property.</param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Set(System.String,System.Double)">
      <summary>
        <para>Adds the given property name/value pair to the collection.</para>
        <para>If the given property name already exists in the collection, then its value will be replaced.</para>
      </summary>
      <param name="name">
        <para>Unique name of the property to add or update.</para>
        <para>Cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="value">The value to be assigned to the property.</param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Set(System.String,System.Int32)">
      <summary>
        <para>Adds the given property name/value pair to the collection.</para>
        <para>If the given property name already exists in the collection, then its value will be replaced.</para>
      </summary>
      <param name="name">
        <para>Unique name of the property to add or update.</para>
        <para>Cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="value">The value to be assigned to the property.</param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties.Set(System.String,System.String)">
      <summary>
        <para>Adds the given property name/value pair to the collection.</para>
        <para>If the given property name already exists in the collection, then its value will be replaced.</para>
      </summary>
      <param name="name">
        <para>Unique name of the property to add or update.</para>
        <para>Cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="value">The string to be assigned to the property.</param>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaRuntime">
      <summary>
        <para>
  Runtime used to run a Corona project and manage its lifetime via its suspend, resume, and terminate methods and events.
 </para>
        <para>
  You would not normally create a CoronaRuntime instance yourself. Instead, you would use a Corona runtime object
  provided by a "CoronaLabs.Corona.WinRT.Phone.CoronaPanel" Xaml control.
 </para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.#ctor(CoronaLabs.Corona.WinRT.Interop.CoronaInteropSettings)">
      <summary>Creates a new Corona runtime with the given interop settings.</summary>
      <param name="settings">
        <para>Provides cross-platform and cross-language feature implementations to the C/C++ side of Corona.</para>
        <para>Also provides an optional reference to the Corona control that the runtime will be rendering to.</para>
        <para>All other settings in the given object must be set or else an exception will be thrown</para>
      </param>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntime.Loaded">
      <summary>
        <para>Raised after loading the "config.lua" file and just but before executing the "main.lua" file.</para>
        <para>This is the application's opportunity to register custom APIs into Lua.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.Resume">
      <summary>
        <para>Resumes the runtime, if currently suspended.</para>
        <para>This will raise an "applicationResume" system event in Lua.</para>
      </summary>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntime.Resumed">
      <summary>Raised when the Corona runtime has been resumed after a suspend.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.Run">
      <summary>
        <para>
  Starts executing the "resource.car" or "main.lua" file found under the default resource
  directory specified by the <see cref="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DefaultResourceDirectoryPath" /> property.
 </para>
        <para>
  If the runtime is currently executing a Corona project, then it will be terminated before running a new one.
 </para>
      </summary>
      <returns>
        <para>Returns a success result if the Corona runtime was able to start up.</para>
        <para>
  Returns a failure result if unable to start. In this case, the result object's "Message" property
  will provide an error message indicating why the failure occurred.
 </para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.Run(System.String)">
      <summary>
        <para>Starts the Corona runtime by executing the given *.lua or *.car file.</para>
        <para>
  If the runtime is currently executing a Corona project, then it will be terminated before running a new one.
 </para>
      </summary>
      <param name="filePath">
        <para>Absolute path to a *.lua or *.car file to be executed.</para>
        <para>This is normally set to a "main.lua" or "resource.car" file in the resource directory.</para>
        <para>
  This file does not have to reside in the resource directory, but it is recommended since the
  Lua require() function defaults to finding Lua files in the resource directory.
 </para>
        <para>Cannot be null or empty string or else an exception will be thrown.</para>
      </param>
      <returns>
        <para>Returns a success result if the Corona runtime was able to start up.</para>
        <para>
  Returns a failure result if unable to start. In this case, the result object's "Message" property
  will provide an error message indicating why the failure occurred.
 </para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.RunInDirectory(System.String)">
      <summary>
        <para>
  Starts the Corona runtime by using the given path as the resource directory and executing
  the "resource.car" or "main.lua" file found it it.
 </para>
        <para>
  If the runtime is currently executing a Corona project, then it will be terminated before running a new one.
 </para>
      </summary>
      <param name="resourceDirectoryPath">
        <para>Absolute path to the directory that Corona should use as the resource directory.</para>
        <para>Cannot be null or empty string or else an exception will be thrown.</para>
      </param>
      <returns>
        <para>Returns a success result if the Corona runtime was able to start up.</para>
        <para>
  Returns a failure result if unable to start. In this case, the result object's "Message" property
  will provide an error message indicating why the failure occurred.
 </para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.RunUsing(CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings)">
      <summary>
        <para>Starts the Corona runtime using the given launch settings.</para>
        <para>
  If the runtime is currently executing a Corona project, then it will be terminated before running a new one.
 </para>
      </summary>
      <param name="settings">
        <para>
  Settings which allow you to customize the Corona runtime environment such as directory paths,
  which file to launch on startup.
 </para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
      <returns>
        <para>Returns a success result if the Corona runtime was able to start up.</para>
        <para>
  Returns a failure result if unable to start. In this case, the result object's "Message" property
  will provide an error message indicating why the failure occurred.
 </para>
      </returns>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntime.Started">
      <summary>Raised just after the "main.lua" file has been executed by the Corona runtime.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntime.State">
      <summary>Indicates if the Corona runtime is currently running, suspended, terminated, etc.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.Suspend">
      <summary>
        <para>Suspends/pauses the runtime, if currently running.</para>
        <para>This will raise an "applicationSuspend" system event in Lua.</para>
      </summary>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntime.Suspended">
      <summary>
        <para>
  Raised when the Corona runtime has been suspended which pauses all rendering, audio, timers
  and other Corona related operations.
 </para>
        <para>
  This is typically raised when the end-user navigates to another app or when the power button has been pressed.
 </para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntime.Terminate">
      <summary>
        <para>Exits and destroys the runtime, if not done already.</para>
        <para>This will raise an "applicationExit" system event in Lua.</para>
      </summary>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntime.Terminating">
      <summary>
        <para>Raised just before the Corona runtime environment is about to be terminated.</para>
        <para>
  This typically happens when the end-user backs out of the app, the Corona XAML control has been unloaded
  from the page, or when the runtime's Terminate() method has been called.
 </para>
      </summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment">
      <summary>Provides information and services for one active Corona runtime instance.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.AddEventListener(System.String,CoronaLabs.Corona.WinRT.CoronaLuaEventHandler)">
      <summary>
        <para>Subscribes an event handler to be invoked when the given Corona event name gets dispatched.</para>
        <para>
  It is okay to call this method before the runtime has started. Once started, the runtime will
  automatically subscribe the given handler to the event.
 </para>
      </summary>
      <param name="eventName">
        <para>The name of the event to subscribe to such as "system", "enterFrame", etc.</para>
        <para>
  You can also specify your own custom event name that you can dispatch in Lua via Runtime:dispatchEvent()
  or via this object's <see cref="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DispatchEvent(CoronaLabs.Corona.WinRT.CoronaLuaEventArgs)" /> method.
 </para>
        <para>The given event name cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="eventHandler">
        <para>The handler to be invoked when the Corona event has been dispatched/raised.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.CachesDirectoryPath">
      <summary>
        <para>Gets the path that Corona's "system.CachesDirectory" property maps to in Lua.</para>
        <para>This directory's files will be automatically deleted if the system is running low on storage space.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.CoronaControlAdapter">
      <summary>
 Gets the control that hosts the rendering surface and child controls created via Lua's native APIs.
</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DefaultCachesDirectoryPath">
      <summary>
        <para>Gets the default path that Corona will use for the "system.CachesDirectory" property in Lua.</para>
        <para>This directory's files will be automatically deleted if the system is running low on storage space.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DefaultDocumentsDirectoryPath">
      <summary>Gets the default path that Corona will use for the "system.DocumentsDirectory" property in Lua.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DefaultInternalDirectoryPath">
      <summary>
        <para>Gets the default path that Corona will use to store files for its internal features, such as analytics.</para>
        <para>This directory is not made available in Lua.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DefaultResourceDirectoryPath">
      <summary>Gets the default path that Corona will use for the "system.ResourceDirectory" property in Lua.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DefaultTemporaryDirectoryPath">
      <summary>
        <para>Gets the default path that Corona will use for the "system.TemporaryDirectory" property in Lua.</para>
        <para>This directory's files will be automatically deleted if the system is running low on storage space.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DispatchEvent(CoronaLabs.Corona.WinRT.CoronaLuaEventArgs)">
      <summary>
        <para>Dispatches the given Corona event to Lua to be received by a Lua function.</para>
        <para>Lua functions can subscribe to the given event via the Lua Runtime:addEventListener() function.</para>
      </summary>
      <param name="eventArgs">
        <para>The Corona event to be dispatched to Lua. Its properties will be passed into Lua as an "event" table.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
      <returns>
        <para>Returns the result of this Corona event dispatch operation.</para>
        <para>
  Will return a success result if the given Corona event was dispatched to Lua. The result object will also
  provide the value returned by a Lua event listener function (if any) via its "ReturnedValue" property.
  Note that a success result does not mean that there were any Lua event listeners subscribed to the given
  event via the Lua Runtime:addEventListener() function.
 </para>
        <para>
  Will return a failure result if the Corona runtime has not been started up yet or if the runtime has
  been terminated. This means that there is no Lua state object available to push the event into.
 </para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.DocumentsDirectoryPath">
      <summary>Gets the path that Corona's "system.DocumentsDirectory" property maps to in Lua.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.InternalDirectoryPath">
      <summary>
        <para>Gets the directory path that Corona uses to store files for its internal features, such as analytics.</para>
        <para>This directory is not made available in Lua.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.InteropServices">
      <summary>
        <para>Provides cross-platform and cross-language access to features to the C/C++ side of Corona.</para>
        <para>This property is not intended for public use.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.LaunchFilePath">
      <summary>
        <para>Gets the path to the file that the Corona runtime began execution on.</para>
        <para>Typically set to a "resource.car" "main.lua" or "resource.car" file.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.RemoveEventListener(System.String,CoronaLabs.Corona.WinRT.CoronaLuaEventHandler)">
      <summary>
        <para>Unsubscribes the given event handler from the specified Corona event.</para>
        <para>
  This method is expected to be called with the same event name and handler arguments passed into the
  <see cref="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.AddEventListener(System.String,CoronaLabs.Corona.WinRT.CoronaLuaEventHandler)" /> method.
 </para>
      </summary>
      <param name="eventName">
        <para>The name of the Corona event to unsubscribe from such as "system", "enterFrame", etc.</para>
        <para>The given event name cannot be null/empty or else an exception will be thrown.</para>
      </param>
      <param name="eventHandler">
        <para>Reference to the handler that was previously given to the <see cref="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.AddEventListener(System.String,CoronaLabs.Corona.WinRT.CoronaLuaEventHandler)" /> method.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
      <returns>
        <para>Returns true if the event handler was successfully unsubscribed from the Corona event.</para>
        <para>
  Returns false if the given event handler reference was not previously subscribed to the given event name.
 </para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.ResourceDirectoryPath">
      <summary>Gets the path that Corona's "system.ResourceDirectory" property maps to in Lua.</summary>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.Resumed">
      <summary>Raised when the Corona runtime has been resumed after a suspend.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.RuntimeState">
      <summary>Gets the current state of the Corona runtime such as Running, Suspended, Terminated, etc.</summary>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.Suspended">
      <summary>
        <para>
  Raised when the Corona runtime has been suspended which pauses all rendering, audio, timers
  and other Corona related operations.
 </para>
        <para>
  This is typically raised when the end-user navigates to another app or when the power button has been pressed.
 </para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.TemporaryDirectoryPath">
      <summary>
        <para>Gets the path that Corona's "system.TemporaryDirectory" property maps to in Lua.</para>
        <para>This directory's files will be automatically deleted if the system is running low on storage space.</para>
      </summary>
    </member>
    <member name="E:CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment.Terminating">
      <summary>
        <para>Raised just before the Corona runtime environment is about to be terminated.</para>
        <para>
  This typically happens when the end-user backs out of the app, the Corona XAML control has been unloaded
  from the page, or when the runtime's Terminate() method has been called.
 </para>
      </summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaRuntimeEventArgs">
      <summary>Provides information about a Corona runtime event.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntimeEventArgs.#ctor(CoronaLabs.Corona.WinRT.CoronaRuntimeEnvironment)">
      <summary>Creates a new object for storing a Corona runtime event's information.</summary>
      <param name="environment">
        <para>The Corona runtime environment the event originated from.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeEventArgs.CoronaRuntimeEnvironment">
      <summary>Gets the Corona runtime environment that the event originated from.</summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings">
      <summary>
 Provides customizable settings that Corona should use on startup, such as directory paths to be used in Lua
 and the Lua file to be executed on startup.
</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.#ctor">
      <summary>Creates a new settings object initialized to its defaults.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.CachesDirectoryPath">
      <summary>
        <para>Gets or sets the path Corona will use for its caches directory.</para>
        <para>This is the directory that Lua property "system.CachesDirectory" maps to.</para>
        <para>This directory's files will be automatically deleted if the system is running low on storage space.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.CopyFrom(CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings)">
      <summary>Copies the given settings to this object.</summary>
      <param name="settings">
        <para>Reference to the settings object to copy from.</para>
        <para>Will be ignored if set to null.</para>
      </param>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.DocumentsDirectoryPath">
      <summary>
        <para>Gets or sets the path Corona will use for its documents directory.</para>
        <para>This is the directory that Lua property "system.DocumentsDirectory" maps to.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.InternalDirectoryPath">
      <summary>
        <para>Gets or sets the directory path Corona will use for its internal features, such as analytics.</para>
        <para>This directory is not made available in Lua.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.LaunchFilePath">
      <summary>
        <para>Gets or set a path to the file that the Corona runtime will begin execution on.</para>
        <para>Expected to be set to the path to a "main.lua" or "resource.car" file.</para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.ResourceDirectoryPath">
      <summary>
        <para>Gets or sets the path Corona will use for its resource directory.</para>
        <para>This is the directory that Lua property "system.ResourceDirectory" maps to.</para>
        <para>By default, this is set to the application's read-only ".\Assets\Corona" directory.</para>
        <para>
  The caller can change this to a writable Application Data directory, which is useful if
  the Corona project files were downloaded.
 </para>
      </summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.CoronaRuntimeLaunchSettings.TemporaryDirectoryPath">
      <summary>
        <para>Gets or sets the path Corona will use for its temporary directory.</para>
        <para>This is the directory that Lua property "system.TemporaryDirectory" maps to.</para>
        <para>This directory's files will be automatically deleted if the system is running low on storage space.</para>
      </summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.CoronaRuntimeState">
      <summary>
 Indicates the current state of a <see cref="T:CoronaLabs.Corona.WinRT.CoronaRuntime">CoronaRuntime</see> object such as Starting, Running, etc.
</summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.NotStarted">
      <summary>Indicates that the Corona runtime has not started a project yet.</summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Starting">
      <summary>
        <para>Indicates that the Corona runtime's Run() method has been called, but hasn't been started yet.</para>
        <para>During this phase, the Corona runtime is initializing itself and attempting to access its rendering surface.</para>
      </summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Running">
      <summary>
 Indicates that the Corona runtime has been started/resumed and is actively executing its Lua scripts,
 rendering to the screen, playing audio, etc.
</summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Suspending">
      <summary>
        <para>
  Indicates that the Corona runtime's Suspend() method has been called and is in the middle of suspending itself.
 </para>
        <para>During this phase, system event "applicationSuspend" is raised in Lua.</para>
      </summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Suspended">
      <summary>
        <para>Indicates that the Corona runtime has been suspended.</para>
        <para>
  This means features such as rendering, audio, timers, and other Corona related operations have been currently paused.
 </para>
      </summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Resuming">
      <summary>
        <para>
  Indicates that the Corona runtime's Resume() method has been called and is in the middle of resuming itself.
 </para>
        <para>During this phase, system event "applicationResume" event is raised in Lua.</para>
      </summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Terminating">
      <summary>
        <para>Indicates that the Corona runtime is being terminated.</para>
        <para>During this phase, system event "applicationExit" is raised in Lua.</para>
      </summary>
    </member>
    <member name="F:CoronaLabs.Corona.WinRT.CoronaRuntimeState.Terminated">
      <summary>Indicates that the Corona runtime has been completely terminated.</summary>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult">
      <summary>
        <para>Indicates if the Corona runtime has succeeded in dispatching a Corona event to/from Lua.</para>
        <para>Provides the result returned by Corona event handler/listener if dispatched successfully.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult.FailedWith(System.String)">
      <summary>Creates a new result object set to failed and with the given message.</summary>
      <param name="message">Message explaining why the operation failed. Can be null or empty.</param>
      <returns>Returns a new result object set to failed and with the given message.</returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult.HasFailed">
      <summary>Determines if the operation failed.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult.HasSucceeded">
      <summary>Determines if the operation succeeded.</summary>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult.Message">
      <summary>Message providing details about the final result of the operation.</summary>
      <returns>
 Returns a message providing details about the final result of the operation.
 If the operation failed, then this message typically provides details indicating what went wrong.
 Operations that are successful typically provide an empty message string.
</returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult.ReturnedValue">
      <summary>Provides the value returned by the Corona event handler/listener.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.DispatchCoronaLuaEventResult.SucceededWith(CoronaLabs.Corona.WinRT.ICoronaBoxedData)">
      <summary>Creates a new result set to succeeded and with the given return value.</summary>
      <param name="returnedValue">The value returned by the Corona event handler. Can be null.</param>
      <returns>Returns a new result object set to succeeded and with the given return value.</returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData">
      <summary>
        <para>Object which stores a single value that can be transferred to/from Lua.</para>
        <para>Can perform Equals() and CompareTo() checks with other comparable objects and can be used as a key in a table.</para>
        <para>Instances of this interface are immutable and can be used as a key in a hash table or dictionary.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData.CompareTo(System.Object)">
      <summary>Determines if this object is less than, greater than, or equal to the given object.</summary>
      <param name="value">The object to be compared with.</param>
      <returns>
        <para>Returns a positive value if this object is greater than the given object.</para>
        <para>Returns a negative value if this object is less than the given object.</para>
        <para>Returns zero if the both objects are equal.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData.Equals(System.Object)">
      <summary>Determines if this object matches the given object.</summary>
      <param name="value">The object to compare with.</param>
      <returns>
        <para>Returns true if the given object's value matches this object's value.</para>
        <para>Returns false if they do not equal, if given null, or if the given object is of a different type.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ICoronaBoxedComparableData.GetHashCode">
      <summary>Gets an integer hash code for this object.</summary>
      <returns>Returns this object's hash code.</returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.ICoronaBoxedData">
      <summary>Stores data that can be transferred to/from Lua.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ICoronaBoxedData.PushToLua(System.Int64)">
      <summary>Pushes this object's data to the top of the Lua stack.</summary>
      <param name="luaStateMemoryAddress">Memory address to a lua_State object, convertible to a C/C++ pointer.</param>
      <returns>
        <para>Returns true if the push was successful.</para>
        <para>Returns false if it failed or if given a memory address of zero (aka: null pointer).</para>
      </returns>
    </member>
    <member name="T:CoronaLabs.Corona.WinRT.ReadOnlyCoronaLuaEventProperties">
      <summary>
        <para>
  Wraps an existing <see cref="T:CoronaLabs.Corona.WinRT.CoronaLuaEventProperties" /> object, providing read-only access to the
  collection's properties.
 </para>
        <para>Note that this read-only collection cannot prevent modifications of mutables property values.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ReadOnlyCoronaLuaEventProperties.#ctor(CoronaLabs.Corona.WinRT.CoronaLuaEventProperties)">
      <summary>Creates a new read-only wrapper around the given mutable properties collection.</summary>
      <param name="properties">
        <para>The property collection to be wrapped by the new read-only wrapper.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ReadOnlyCoronaLuaEventProperties.Contains(System.String)">
      <summary>Determines if the given property name exists in the collection.</summary>
      <param name="name">The unique name of the property to search for.</param>
      <returns>
        <para>Returns true if the given property name exists in the collection.</para>
        <para>Returns false if not or if given a null/emptry string.</para>
      </returns>
    </member>
    <member name="P:CoronaLabs.Corona.WinRT.ReadOnlyCoronaLuaEventProperties.Count">
      <summary>Fetches the number of properties stored in the collection.</summary>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ReadOnlyCoronaLuaEventProperties.First">
      <summary>Gets an iterator that can be used to traverse all properties in the collection via a foreach loop.</summary>
      <returns>Returns an iterator that can be used to traverse all properties in the collection.</returns>
    </member>
    <member name="M:CoronaLabs.Corona.WinRT.ReadOnlyCoronaLuaEventProperties.Get(System.String)">
      <summary>Fetches a property value from the collection by its property name.</summary>
      <param name="name">The unique name of the property to fetch from.</param>
      <returns>
        <para>Returns the value of the specified property in boxed object form.</para>
        <para>Returns null if the property name was not found.</para>
      </returns>
    </member>
    <member name="T:CoronaLabs.WinRT.BoxedString">
      <summary>
        <para>Nullable type used to store a string object.</para>
        <para>
  This is needed because the C++/CX <see cref="T:Platform.String" /> class is not a nullable type,
  where setting it to null makes it an empty string instead.
 </para>
        <para>Instances of this type are immutable.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.WinRT.BoxedString.#ctor(System.String)">
      <summary>Creates a new object boxing the given string.</summary>
      <param name="value">
        <para>The string to be boxed.</para>
        <para>
  Cannot be set to null in .NET or else an exception will be thrown.
  However, it can be set to null in C++/CX, which is really an empty string.
 </para>
      </param>
    </member>
    <member name="M:CoronaLabs.WinRT.BoxedString.ToString">
      <summary>Gets the boxed string.</summary>
      <returns>Returns the boxed string.</returns>
    </member>
    <member name="P:CoronaLabs.WinRT.BoxedString.Value">
      <summary>Gets the boxed string.</summary>
    </member>
    <member name="T:CoronaLabs.WinRT.CancelEventArgs">
      <summary>Provides a flag indicating if the event's associated operation should be canceled.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.CancelEventArgs.#ctor">
      <summary>Creates a new event arguments object with the Cancel property defaulted to false.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.CancelEventArgs.Cancel">
      <summary>Gets or sets whether or not the event's associated operation should be canceled.</summary>
    </member>
    <member name="T:CoronaLabs.WinRT.EmptyEventArgs">
      <summary>Event arguments class to be used by component class events that do not provide any arguments.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.EmptyEventArgs.Instance">
      <summary>Provides a pre-allocated empty event arguments objects to be used component class events.</summary>
    </member>
    <member name="T:CoronaLabs.WinRT.HandledEventArgs">
      <summary>
 Event arguments providing a flag indicating whether or not an event handler has handled the raised event.
</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.HandledEventArgs.#ctor">
      <summary>Creates a new event arguments object with the Handled property defaulted to false.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.HandledEventArgs.Handled">
      <summary>Gets or sets whether or not the event was handled.</summary>
    </member>
    <member name="T:CoronaLabs.WinRT.ImmutableByteBuffer">
      <summary>Stores a static collection of bytes which cannot be changed.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.ImmutableByteBuffer.Count">
      <summary>Gets the number of bytes stored in this buffer.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.ImmutableByteBuffer.Empty">
      <summary>
        <para>Gets a pre-allocated ImmutableByteBuffer instance which contains zero bytes.</para>
        <para>You can use this object to optimize member variable initialization of this type.</para>
      </summary>
    </member>
    <member name="M:CoronaLabs.WinRT.ImmutableByteBuffer.First">
      <summary>Gets an iterator used to iterate through all of the bytes in the buffer in a foreach loop.</summary>
      <returns>Returns an iterator to be used by a foreach loop.</returns>
    </member>
    <member name="M:CoronaLabs.WinRT.ImmutableByteBuffer.From(System.Byte[])">
      <summary>Creates a new immutable byte buffer containing a copy of the given byte array.</summary>
      <param name="bytes">Byte array to be copied to the new immutable byte buffer.</param>
      <returns>
        <para>Returns a new immutable byte buffer containing a copy of the given byte array.</para>
        <para>Returns null if the given byte array is null.</para>
        <para>Returns the <see cref="P:CoronaLabs.WinRT.ImmutableByteBuffer.Empty" /> immutable byte buffer instance if the given array is empty.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.WinRT.ImmutableByteBuffer.From(Windows.Foundation.Collections.IIterable{System.Byte})">
      <summary>Creates a new immutable byte buffer containing a copy of the given byte collection.</summary>
      <param name="bytes">Byte collection to be copied to the new immutable byte buffer.</param>
      <returns>
        <para>Returns a new immutable byte buffer containing a copy of the given byte collection.</para>
        <para>Returns null if the given byte collection is null.</para>
        <para>Returns the <see cref="P:CoronaLabs.WinRT.ImmutableByteBuffer.Empty" /> immutable byte buffer instance if the given collection is empty.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.WinRT.ImmutableByteBuffer.From(Windows.Foundation.Collections.IVector{System.Byte})">
      <summary>Creates a new immutable byte buffer containing a copy of the given byte collection.</summary>
      <param name="bytes">Byte collection to be copied to the new immutable byte buffer.</param>
      <returns>
        <para>Returns a new immutable byte buffer containing a copy of the given byte collection.</para>
        <para>Returns null if the given byte collection is null.</para>
        <para>Returns the <see cref="P:CoronaLabs.WinRT.ImmutableByteBuffer.Empty" /> immutable byte buffer instance if the given collection is empty.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.WinRT.ImmutableByteBuffer.GetByIndex(System.Int32)">
      <summary>Fetches a byte from the buffer by its zero based index.</summary>
      <param name="index">
        <para>Zero based index to the byte in the buffer.</para>
        <para>Will throw an exception if the index is out of bounds. (ie: less than zero or greater than Count.)</para>
      </param>
      <returns>Returns the indexed byte.</returns>
    </member>
    <member name="P:CoronaLabs.WinRT.ImmutableByteBuffer.IsEmpty">
      <summary>Determins if this buffer contains zero bytes.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.ImmutableByteBuffer.IsNotEmpty">
      <summary>Determines if this buffer contains at least 1 byte.</summary>
    </member>
    <member name="T:CoronaLabs.WinRT.IOperationResult">
      <summary>Indicates if an operation has succeeded or failed.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.IOperationResult.HasFailed">
      <summary>Determines if the operation failed.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.IOperationResult.HasSucceeded">
      <summary>Determines if the operation succeeded.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.IOperationResult.Message">
      <summary>Message providing details about the final result of the operation.</summary>
      <returns>
 Returns a message providing details about the final result of the operation.
 If the operation failed, then this message typically provides details indicating what went wrong.
 Operations that are successful typically provide an empty message string.
</returns>
    </member>
    <member name="T:CoronaLabs.WinRT.MessageEventArgs">
      <summary>Provides a message for an event.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.MessageEventArgs.#ctor(System.String)">
      <summary>Creates a new event arguments object with the given message.</summary>
      <param name="message">
        <para>The message to be provided.</para>
        <para>Cannot be null or else an exception will be thrown.</para>
      </param>
    </member>
    <member name="P:CoronaLabs.WinRT.MessageEventArgs.Message">
      <summary>Gets the event's message.</summary>
    </member>
    <member name="T:CoronaLabs.WinRT.OperationResult">
      <summary>Indicates if an operation has succeeded or failed.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.OperationResult.FailedWith(System.String)">
      <summary>Creates a new OperationResult object set to failed and with the given message.</summary>
      <param name="message">Message explaining why the operation failed. Can be null or empty.</param>
      <returns>Returns a new OperationResult object set to failed and with the given message.</returns>
    </member>
    <member name="P:CoronaLabs.WinRT.OperationResult.HasFailed">
      <summary>Determines if the operation failed.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.OperationResult.HasSucceeded">
      <summary>Determines if the operation succeeded.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.OperationResult.Message">
      <summary>Message providing details about the final result of the operation.</summary>
      <returns>
 Returns a message providing details about the final result of the operation.
 If the operation failed, then this message typically provides details indicating what went wrong.
 Operations that are successful typically provide an empty message string.
</returns>
    </member>
    <member name="P:CoronaLabs.WinRT.OperationResult.Succeeded">
      <summary>Gets a reusable OperationResult object set to succeeded and with an empty message.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.OperationResult.SucceededWith(System.String)">
      <summary>Creates a new OperationResult object set to succeeded and with the given message.</summary>
      <param name="message">The status message to be provided by returned object. Can be null or empty.</param>
      <returns>Returns a new OperationResult object set to succeeded and with the given message.</returns>
    </member>
    <member name="T:CoronaLabs.WinRT.Utf8String">
      <summary>Represents a UTF-8 encoded string.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.#ctor">
      <summary>Creates an empty string.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.#ctor(System.String)">
      <summary>Creates a new UTF-8 encoded string using the given UTF-16 encoded string.</summary>
      <param name="utf16String">Reference to a UTF-16 encoded string. Can be null or empty.</param>
    </member>
    <member name="P:CoronaLabs.WinRT.Utf8String.ByteCount">
      <summary>
 Gets the number of bytes used to store this UTF-8 encoded string, including the null termination character.
</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.Utf8String.CharacterCount">
      <summary>Gets the number of characters in this string, excluding the null termination character.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.Utf8String.Empty">
      <summary>Represents an empty "" UTF-8 encoded string.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.Equals(CoronaLabs.WinRT.Utf8String)">
      <summary>Determines if the given string matches this string.</summary>
      <param name="value">The string to be compared with.</param>
      <returns>
        <para>Returns true if the given string matches this string.</para>
        <para>Returns false if they do no match or if the given string is null.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.Equals(System.Object)">
      <summary>Determines if this object matches the given object.</summary>
      <param name="value">The object to compare with.</param>
      <returns>
        <para>Returns true if the given object's value matches this object's value.</para>
        <para>Returns false if they do not equal, if given null, or if the given object is of a different type.</para>
      </returns>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.From(System.String)">
      <summary>Converts the given UTF-16 string to a UTF-8 encoded string object.</summary>
      <param name="utf16String">The UTF-16 string to be converted. Can be null or empty.</param>
      <returns>
        <para>Returns an object containing the UTF-8 equivlanet of the given UTF-16 string.</para>
        <para>Returns an empty string if the given string is null or empty.</para>
      </returns>
    </member>
    <member name="P:CoronaLabs.WinRT.Utf8String.IsEmpty">
      <summary>Determines if this string does not contain any characters.</summary>
    </member>
    <member name="P:CoronaLabs.WinRT.Utf8String.IsNotEmpty">
      <summary>Determines if this string contains any characters.</summary>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.ToLower">
      <summary>Creates and returns a copy of this string converted to lowercase.</summary>
      <returns>Returns a new string object having all lowercased characters.</returns>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.ToString">
      <summary>Converts this UTF-8 encoded string to a UTF-16 encoded standard string object.</summary>
      <returns>Returns this string converted to UTF-16 form.</returns>
    </member>
    <member name="M:CoronaLabs.WinRT.Utf8String.ToUpper">
      <summary>Creates and returns a copy of this string converted to uppercase.</summary>
      <returns>Returns a new string object having all uppercased characters.</returns>
    </member>
  </members>
</doc>